name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        # ✅ Cách 1: healthcheck sử dụng `mongosh` (bản mới của mongo shell)
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      # 1️⃣ Checkout code
      - uses: actions/checkout@v4

      # 2️⃣ Thiết lập Node.js
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # 3️⃣ restaurant-service: cache + cài đặt + test
      - name: Cache dependencies for restaurant-service
        uses: actions/cache@v4
        with:
          path: ./backend/restaurant-service/node_modules
          key: ${{ runner.os }}-restaurant-${{ matrix.node-version }}-${{ hashFiles('./backend/restaurant-service/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-restaurant-${{ matrix.node-version }}-

      - name: Install dependencies for restaurant-service
        working-directory: ./backend/restaurant-service
        run: npm ci

      # ✅ Chờ MongoDB khởi động hoàn toàn trước khi test
      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to start..."
          for i in {1..10}; do
            if mongosh --quiet --eval "db.adminCommand({ ping: 1 })" localhost:27017/testdb; then
              echo "✅ MongoDB is up!"
              break
            fi
            echo "⏳ Still waiting ($i/10)..."
            sleep 5
          done

      - name: Run tests for restaurant-service (use service MongoDB)
        working-directory: ./backend/restaurant-service
        env:
          # Ensure tests connect to the MongoDB service container (not an in-process mongodb-memory-server).
          # Your test code must respect MONGODB_URI for this to take effect.
          MONGODB_URI: mongodb://localhost:27017/testdb
        run: npm test

      # 4️⃣ frontend: cache + install + test
      - name: Cache dependencies for frontend
        uses: actions/cache@v4
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ matrix.node-version }}-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-${{ matrix.node-version }}-

      - name: Install dependencies for frontend
        working-directory: ./frontend
        run: npm ci

      - name: Run tests for frontend
        working-directory: ./frontend
        # Allow react-scripts to succeed even when there are no tests
        run: npm test -- --passWithNoTests