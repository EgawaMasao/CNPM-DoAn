name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - uses: actions/checkout@v4

      - name: Install libcrypto.so.1.1 (libssl1.1) — robust install
        run: |
          set -euo pipefail
          sudo apt-get update
          echo "Attempting to install libssl1.1 from apt..."
          if sudo apt-get install -y libssl1.1; then
            echo "libssl1.1 installed from apt"
          else
            echo "libssl1.1 not available from apt — attempting manual download/install"
            TMP_DEB=/tmp/libssl1.1.deb
            urls=(
              "https://archive.ubuntu.com/ubuntu/pool/main/o/openssl1.1/libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb"
              "https://security.ubuntu.com/ubuntu/pool/main/o/openssl1.1/libssl1.1_1.1.1f-1ubuntu2.16_amd64.deb"
              "https://launchpad.net/ubuntu/+archive/primary/+files/libssl1.1_1.1.1f-1ubuntu2.22_amd64.deb"
            )
            downloaded=0
            for url in "${urls[@]}"; do
              echo "Trying $url"
              if curl -fsSL -o "$TMP_DEB" "$url"; then
                echo "Downloaded $url"
                downloaded=1
                break
              else
                echo "Failed: $url"
              fi
            done
            if [ "$downloaded" -ne 1 ]; then
              echo "Failed to download libssl1.1 deb. Consider using runs-on: ubuntu-20.04 or providing a correct .deb URL."
              exit 1
            fi
            echo "Installing downloaded deb..."
            sudo dpkg -i "$TMP_DEB" || sudo apt-get -f install -y
          fi
          echo "Verifying libcrypto..."
          if ldconfig -p | grep -q "libcrypto.so.1.1"; then
            echo "✅ libcrypto.so.1.1 is available"
          else
            echo "⚠️ libcrypto.so.1.1 still not found after install attempt"
            ldconfig -p || true
            exit 1
          fi

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache dependencies for restaurant-service
        uses: actions/cache@v4
        with:
          path: ./backend/restaurant-service/node_modules
          key: ${{ runner.os }}-restaurant-${{ matrix.node-version }}-${{ hashFiles('./backend/restaurant-service/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-restaurant-${{ matrix.node-version }}-

      - name: Install dependencies for restaurant-service
        working-directory: ./backend/restaurant-service
        run: npm ci

      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to start..."
          for i in {1..10}; do
            if mongosh --quiet --eval "db.adminCommand({ ping: 1 })" localhost:27017/testdb; then
              echo "✅ MongoDB is up!"
              break
            fi
            echo "⏳ Still waiting ($i/10)..."
            sleep 5
          done

      - name: Run tests for restaurant-service
        working-directory: ./backend/restaurant-service
        env:
          MONGODB_URI: mongodb://localhost:27017/testdb
        run: npm test

      - name: Cache dependencies for frontend
        uses: actions/cache@v4
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ matrix.node-version }}-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-${{ matrix.node-version }}-

      - name: Install dependencies for frontend
        working-directory: ./frontend
        run: npm ci

      - name: Run tests for frontend
        working-directory: ./frontend
        run: npm test