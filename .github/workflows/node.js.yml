name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --quiet --eval 'db.adminCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # backend/restaurant-service: cache, install, test (connect to service MongoDB)
      - name: Cache dependencies for restaurant-service
        uses: actions/cache@v4
        with:
          path: ./backend/restaurant-service/node_modules
          key: ${{ runner.os }}-restaurant-${{ matrix.node-version }}-${{ hashFiles('./backend/restaurant-service/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-restaurant-${{ matrix.node-version }}-

      - name: Install dependencies for restaurant-service
        working-directory: ./backend/restaurant-service
        run: npm ci

      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to start on localhost:27017..."
          for i in {1..30}; do
            # Prefer mongosh check if available
            if command -v mongosh >/dev/null 2>&1; then
              if mongosh --quiet --eval "db.adminCommand({ ping: 1 })" localhost:27017/testdb; then
                echo "✅ MongoDB is up (mongosh)"
                break
              fi
            else
              # Fallback: check TCP port
              if (echo > /dev/tcp/localhost/27017) >/dev/null 2>&1; then
                echo "✅ MongoDB port is open (TCP check)"
                break
              fi
            fi
            echo "⏳ Still waiting ($i/30)..."
            sleep 2
          done

      - name: Run tests for restaurant-service
        working-directory: ./backend/restaurant-service
        env:
          # Ensure tests connect to the mongo:6.0 service container instead of spawning mongodb-memory-server
          MONGODB_URI: mongodb://localhost:27017/testdb
        run: npm test

      # frontend: cache, install, test (allow no-tests)
      - name: Cache dependencies for frontend
        uses: actions/cache@v4
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ matrix.node-version }}-${{ hashFiles('./frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-${{ matrix.node-version }}-

      - name: Install dependencies for frontend
        working-directory: ./frontend
        run: npm ci

      - name: Run tests for frontend
        working-directory: ./frontend
        # Allow react-scripts to succeed even when there are no tests
        run: npm test -- --passWithNoTests